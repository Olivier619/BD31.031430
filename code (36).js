// --- CONTENU COMPLET DE bd_creator_session_manager.js (Version Finale) ---
/**
 * BD Creator - Session Manager
 * Gère la sauvegarde et le chargement des sessions de travail.
 */
class SessionManager {
    constructor() { console.log("SessionManager: Initialisation..."); this.localStorageKey = 'bdCreatorSessions'; this.currentSessionIdKey = 'currentSessionId'; this.currentSessionId = localStorage.getItem(this.currentSessionIdKey) || null; this.sessions = this.loadAllSessions(); document.addEventListener('DOMContentLoaded', () => { console.log("SessionManager: DOM chargé, initialisation UI."); this.initUI(); }); }
    initUI() { console.log("SessionManager: initUI."); this.addEventListeners(); this.updateSessionsList(); this.updateCurrentSessionInfo(); }
    addEventListeners() { console.log("SessionManager: addEventListeners."); const saveButton = document.getElementById('save-session-btn'); const newButton = document.getElementById('new-session-btn'); const loadSelect = document.getElementById('load-session-select'); if (saveButton) saveButton.addEventListener('click', this.saveCurrentSession.bind(this)); else console.warn(" Bouton 'save-session-btn' non trouvé."); if (newButton) newButton.addEventListener('click', this.startNewSession.bind(this)); else console.warn(" Bouton 'new-session-btn' non trouvé."); if (loadSelect) { loadSelect.addEventListener('change', (event) => { const sessionId = event.target.value; if (sessionId) { this.loadSession(sessionId); event.target.value = ""; } }); } else { console.warn(" Sélecteur 'load-session-select' non trouvé."); } }
    updateSessionsList() { /* console.log("SessionManager: updateSessionsList."); */ const loadSelect = document.getElementById('load-session-select'); if (!loadSelect) return; loadSelect.innerHTML = '<option value="">Charger une session...</option>'; const sortedSessionIds = Object.keys(this.sessions).sort((a, b) => (this.sessions[b]?.timestamp || 0) - (this.sessions[a]?.timestamp || 0)); sortedSessionIds.forEach(sessionId => { const session = this.sessions[sessionId]; if (session && session.name && typeof session.timestamp === 'number') { const option = document.createElement('option'); option.value = sessionId; const dateString = new Date(session.timestamp).toLocaleString('fr-FR', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' }); option.textContent = `${session.name} (${dateString})`; loadSelect.appendChild(option); } }); /* console.log(`SessionManager: Liste sessions MàJ (${sortedSessionIds.length}).`); */ }
    getCurrentSessionData() { /* console.log("SessionManager: getCurrentSessionData."); */ return { keywords: localStorage.getItem('bdKeywords') || '', scenario: localStorage.getItem('bdScenario') || '', storyboard: localStorage.getItem('bdStoryboard') || '', prompts: localStorage.getItem('bdPrompts') || '', }; }
    saveCurrentSession() { console.log("SessionManager: saveCurrentSession."); const defaultName = `Ma BD ${new Date().toLocaleDateString('fr-FR')}`; const sessionName = prompt("Nommez cette session :", defaultName); if (!sessionName?.trim()) { alert("Sauvegarde annulée."); return; } const sessionId = `session_${Date.now()}_${Math.random().toString(36).substring(2, 7)}`; const sessionData = this.getCurrentSessionData(); sessionData.name = sessionName.trim(); sessionData.timestamp = Date.now(); this.sessions[sessionId] = sessionData; this.currentSessionId = sessionId; localStorage.setItem(this.currentSessionIdKey, this.currentSessionId); this.saveAllSessions(); alert(`Session "${sessionName}" sauvegardée !`); this.updateSessionsList(); this.updateCurrentSessionInfo(); }
    startNewSession() { console.log("SessionManager: startNewSession."); if (confirm("Commencer une nouvelle session ?")) { try { ['bdKeywords', 'bdScenario', 'bdStoryboard', 'bdPrompts', this.currentSessionIdKey].forEach(key => localStorage.removeItem(key)); this.currentSessionId = null; window.location.href = 'index.html?newsession=' + Date.now(); } catch (error) { console.error("Erreur startNewSession:", error); alert("Erreur nouvelle session."); } } }
    loadSession(sessionId) { console.log(`SessionManager: loadSession ID: ${sessionId}`); const sessionToLoad = this.sessions[sessionId]; if (!sessionToLoad || typeof sessionToLoad !== 'object') { alert("Erreur : Session introuvable !"); return; } const sessionName = sessionToLoad.name || `Session ${sessionId}`; if (confirm(`Charger "${sessionName}" ?`)) { try { this.currentSessionId = sessionId; localStorage.setItem(this.currentSessionIdKey, this.currentSessionId); localStorage.setItem('bdKeywords', sessionToLoad.keywords || ''); localStorage.setItem('bdScenario', sessionToLoad.scenario || ''); localStorage.setItem('bdStoryboard', sessionToLoad.storyboard || ''); localStorage.setItem('bdPrompts', sessionToLoad.prompts || ''); this.updateCurrentSessionInfo(); alert(`Session "${sessionName}" chargée. Rechargement...`); window.location.reload(); } catch (error) { console.error(`Erreur chargement session ${sessionId}:`, error); alert("Erreur chargement session."); } } }
    updateCurrentSessionInfo() { const el = document.getElementById('current-session-name'); if (!el) return; let name = "Nouvelle session"; if (this.currentSessionId && this.sessions[this.currentSessionId]?.name) { name = this.sessions[this.currentSessionId].name; } else if (this.currentSessionId && !this.sessions[this.currentSessionId]) { console.warn(`ID ${this.currentSessionId} invalide.`); localStorage.removeItem(this.currentSessionIdKey); this.currentSessionId = null; } el.textContent = name; el.title = this.currentSessionId ? `ID: ${this.currentSessionId}` : "Aucune"; }
    loadAllSessions() { try { const json = localStorage.getItem(this.localStorageKey); if (!json) return {}; const data = JSON.parse(json); return (typeof data === 'object' && data !== null && !Array.isArray(data)) ? data : {}; } catch (e) { console.error("Erreur parsing sessions:", e); localStorage.removeItem(this.localStorageKey); return {}; } }
    saveAllSessions() { try { localStorage.setItem(this.localStorageKey, JSON.stringify(this.sessions)); } catch (e) { console.error("Erreur sauvegarde sessions:", e); alert("Erreur sauvegarde sessions."); } }
}
if (typeof window.bdSessionManager === 'undefined') { window.bdSessionManager = new SessionManager(); } console.log("bd_creator_session_manager.js chargé.");